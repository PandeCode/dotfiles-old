#!/usr/bin/env bash

is_osx() {
        [ $(uname) == "Darwin" ]
}

is_cygwin() {
        [[ $(uname) =~ CYGWIN ]]
}

is_number() {
        [[ $1 =~ ^[0-9]+$ ]]
}

min() {
        echo $(($1 > $2 ? $2 : $1))
}

ping_host="9.9.9.9"
ping_count=3
ping_wait_time=10

ping_log_file="/tmp/ping.log"
ping_result_file="/tmp/ping_result"
ping_pid_file="/tmp/ping.pid"

RED=#ff5555
GREEN=#50fa7b
YELLOW=#f1fa8c
WHITE=#f8f8f2

ping_not_running() {
        local pid=$(cat $ping_pid_file)
        ! ps -p $pid >/dev/null
}

read_cached_result() {
        if [ -e $ping_result_file ]; then
                cat $ping_result_file
        else
                echo -1
        fi
}

read_ping_result() {
        result=$(cut -sd / -f 5 $ping_log_file | cut -d . -f 1)

        if is_number $result; then
                echo $result
        else
                echo -1
        fi
}

update_cached_result() {
        echo "$1" >$ping_result_file
}

execute_ping() {
        ping -c $ping_count -t $ping_wait_time $ping_host >$ping_log_file &
        echo "$!" >$ping_pid_file
}

colorize_ping_value() {
        local ping=$1
        local result

        if [ $ping -eq -1 ] || [ $ping -ge 1000 ]; then
                result=$RED
        elif [ $ping -lt 100 ]; then
                result=$GREEN
        elif [ $ping -lt 400 ]; then
                result=$WHITE
        elif [ $ping -lt 1000 ]; then
                result=$YELLOW
        fi

        echo $result
}

format_ping_value() {
        local value=$1
        local result

        if [ $value -eq -1 ]; then
                result="N/A"
        elif [ $value -ge 1000 ]; then
                result=$(min $value 9999)
                result=$(($result / 1000))
                result=">$result"K
        else
                result=$(printf %3d $value)
        fi

        echo $result
}

main() {
        local ping_result

        if ping_not_running; then
                ping_result=$(read_ping_result)
                update_cached_result $ping_result

                execute_ping

        else
                ping_result=$(read_cached_result)
        fi

        ping_result="$(format_ping_value $ping_result)"
        echo "$ping_result ms"
        echo "$ping_result"
        echo $(colorize_ping_value $ping_result)
}
main

speedtestStuff() {
        result=$(speedtest-cli --bytes --simple)
        PING=$(echo $result | sed -n 1p | cut -d ':' -f2 | cut -d ' ' -f2)
        DOWN=$(echo $result | sed -n 2p | cut -d ':' -f2 | cut -d ' ' -f2)
        UP=$(echo $result | sed -n 3p | cut -d ':' -f2 | cut -d ' ' -f2)

        echo  $PING" ms" $DOWN "MB/s" $UP "MB/s"
}

tracerouteStuff() {
        #!/bin/sh
        #default="$(ip route | grep default | head -n 1)"
        #  #if [ ! -n "$ext_latency" ]; then
        #  #  ext_latency="$(ping -c 1 1.1.1.1 | grep time= | awk '{print $7}' | cut -d '=' -f 2) ms"
        #  #fi
        #name=$(echo $default | awk '{print $5}')
        #gateway=$(echo $default | awk '{print $3}')
        #latency="$(ping -c 1 $gateway | grep time= | awk '{print $7}' | cut -d '=' -f 2 | awk '{print int($1+0.f)}') ms"
        #echo $latency
        echo  $(traceroute --max-hops=2 1.1.1.1 | grep -v "\*" | awk '/^ [1,2]/ {print int($4+0.f) "ms"}' | xargs)
}
